<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:s="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">


	<bean id="datasource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3306/eboutique?createDatabaseIfNotExist=true" />
		<property name="username" value="root" />
		<property name="password" value="" />
	</bean>


	<bean id="persistenceUnitManager"
		class="org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager">
		<property name="defaultDataSource" ref="datasource"></property>
		<property name="persistenceXmlLocations">
			<list>
				<value>classpath*:META-INF/persistence.xml</value>
			</list>
		</property>
	</bean>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitManager" ref="persistenceUnitManager"></property>
		<property name="persistenceUnitName" value="UP_EBOUTIQUE"></property>
	</bean>
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"></property>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	<context:annotation-config></context:annotation-config>

	<bean id="dao" class="fr.adaming.mycatalogue.dao.BoutiqueDaoImpl"></bean>
	<bean id="metier" class="fr.adaming.mycatalogue.metier.BoutiqueMetierImpl">
		<property name="dao" ref="dao"></property>
	</bean>

	<!-- Spring Security add -->
	<!-- <bean id="datasourceSID"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3306/sid_eboutique?createDatabaseIfNotExist=true" />
		<property name="username" value="root" />
		<property name="password" value="" />
	</bean> -->
	
	<s:http>
		<s:intercept-url pattern="/adminProd/**" access="ROLE_ADMIN_PROD" />		<!-- /produits/** remplacé par adminProd pour intercepter l acces et obliger un admin à se log ? Oui -->
		<s:intercept-url pattern="/adminCat/**" access="ROLE_ADMIN_CAT" />			<!-- IDEM -->
		<s:form-login login-page="/login" default-target-url="/produits/index"
			authentication-failure-url="/login" />				<!-- /produits/index pour les clients non admin n'existe pas... TODO -->
		<s:logout logout-success-url="/logout" />
	</s:http>
	<s:authentication-manager>
		<s:authentication-provider>
			<s:password-encoder hash="bcrypt"></s:password-encoder> <!-- Comment deviner password apres hash pour mettre dans s:user ? -->
			<!-- datasourceSID ou dataSource -->
			<s:jdbc-user-service data-source-ref="datasource"
				users-by-username-query="select userName,password, actived from user where userName=?"
				
 				authorities-by-username-query="Select u.userName, r.roleName From user u Inner Join user_role d On u.idUser = d.User_idUser Inner Join role r On d.roles_idRole = r.idRole Where u.userName=? " />
 				<!-- authorities-by-username-query="select u.userName, r.roleName from user u, role r, user_role d where u.idUser = d.User_idUser and d.roles_idRole = r.idRole and u.userName=? " />  -->
				<!-- Modif pour table association... ATESTER -->
		

			<!-- A preciser : seul Admin1 est autorisé à accéder à pattern necessitant ROLE_ADMIN_CAT -->
			<!-- TOMODIF authorities="ROLE_ADMIN_CAT,ROLE_ADMIN_PROD" -->
			<!-- <s:user-service>
				<s:user name="AdminC" password="0000" authorities="ROLE_ADMIN_CAT"/> 
				<s:user name="AdminP" authorities="ROLE_ADMIN_PROD" password="0000"/> 
			</s:user-service> -->	<!-- Remplacer 0000 par le code hashéSale par Bcrypt : je les ai genere par u nautre projet utilisant org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; depuis 0000 .-->
			
		</s:authentication-provider>
	</s:authentication-manager>

</beans>